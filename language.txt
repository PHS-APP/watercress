Features:
algebraic types (struct + Rust style enum)
syntactic sugar
mutable globals (future)
pure/impure
FFI
standard operators + some extra

Standard Lib:
BY DEFAULT, certain [libraries] are used (similar to the rust prelude)
these are separated into:
core - core functionality: memory management (the default allocator), etc. All 'core' items are used
std - standard functionality: io, 'str', etc. Only certain items are used

to not use default 'std' items, specify "@nodefaultstd" in the file containing the main func
to not use ANY 'std' items (attempting to use them would be an error), specify "@nostd"
to not use ANY 'core' OR 'std' items, specify "@nocore" NOTE: in this case, an allocator MUST be manually specified

FFI:
tsj845's proposal:
    FFI is done via wrapper functions
    these functions are created using an explicit marker
    these functions are the only way to call foreign functions
    data returned by foreign functions cannot leave the wrapper function, it must be copied to a Watercress-native data structure
    wrapper functions are responsable for any necessary deallocation of foreign objects

Funcions:
all functions support overloading, but functions declared with different keywords cannot share a name
pure func - pure function
TBD func - impure funciton, can have side effects (like global state modification) and make calls to foreign func
main func - main function, is itself impure, multiple definitions is an error, main func has no name (it's declared as "main func(args)")
foreign '[abi]' func - foreign function wrapper

return type can be any defined type or primitive, but can additionally be 'void' for no return value
'void' is optional for functions with no return, with the exception of stub functions, it is an error to have 'void' as the return value of a pure function

Data Structures:
primitives - builtin base types
prod - product types (structs)
sum - sum types (Rust enum)
union - same as C union

Memory Management (radicise's idea as understood by tsj845):
prod Container
    // member "child" is a reference to another Container that may be null, "child" defaults to null
    &?Container child = null
end

func A(): void
    contA: Container = Container() // contA is created and tagged with the scope of function A
    B(&contA)
end // contA is now freed because the function it is tagged with has ended

func B(contA: &Container): void
    contB: Container = Container() // contB is created and tagged with the scope of function A
    contC: &Container = C(&contB) // contC now is tagged with function B
    contB.child = contA // contB now has the child field populated by contA
end // contB and contC are freed because it is tagged with a function that has ended, but contA, despite being the value of a member of contB, is not freed because the function it is tagged with is still alive

func C(contB: &Container): &Container
    contC: Container = Container() // contC is created with function C's tag
    return &contC // contC is now tagged with function B
end // contC is not freed because it has been re-tagged with function B's tag


additional operators (not finalized):
& - the reference operator, signals that the value is a reference, this makes no difference to how data structures are interacted with, but allows programmers to specify if a structure should not be passed by value

? - the optional operator, explicitly allows references to be null

Primitives (not finalized):
[s|u][8|16|32|64|128?] - signed and unsigned integer types
f[32|64] - float and double
bool - u8 restricted to one and zero
char - undecided
[*][] - array of '*'s
complex? - a complex number
null - an unset value
